# PERL latexmk config file

# Mode 4 uses lualatex for all calls of 'latexmk'
$pdf_mode = 4;

# Makeindex rules:
$clean_ext .= " %R-*.ind %R-*.idx %R-*.ilg %R-*.ind";

# 'internal' keyword runs given subroutine instead of external command
$makeindex = 'internal splitindex';

sub splitindex {
# Use splitindex instead of makeindex.
# The splitindex programe starts from an .idx file, makes a set of
#   other .idx files for separate indexes, and then runs makeindex to
#   make corresponding .ind files.
# However, it is possible that the document uses the splitindex
#   package, but in a way compatible with the standard methods
#   compatible with makeindex, i.e., with a single index and with the
#   use of the \printindex command.
#   Then we need to invoke makeindex.
# In addition, latexmk assumes that makeindex or its replacement makes
#   an .ind file from an .idx file, and latexmk gives an error if it
#   doesn't exist, we need to make an .ind file.
# Both problems are solved by running makeindex and then splitindex.
# Note: errors are returned by makeindex and splitindex for things
#   like a missing input file.  No error is returned for lines in an
#   input file that are in an incorrect format; they are simply
#   ignored.  So no problem is caused by lines in the .idx file
#   that are generated by splitindex in a format incompatible with
#   makeindex.
   my $ret1 = system( "makeindex", $$Psource );
   my $ret2 = system( "splitindex", $$Psource );
   return $ret1 || $ret2;
}

# ACP: Grabbed from latexmk CTAN distribution:
# Implementing glossary with bib2gls and glossaries-extra, with the
#  log file (.glg) analyzed to get dependence on a .bib file.
# !!! ONLY WORKS WITH VERSION 4.54 or higher of latexmk

# Push new file endings into list holding those files
# that are kept and later used again (like idx, bbl, ...):
push @generated_exts, 'glstex', 'glg';

# Add custom dependency.
# latexmk checks whether a file with ending as given in the 2nd
# argument exists ('toextension'). If yes, check if file with
# ending as in first argument ('fromextension') exists. If yes,
# run subroutine as given in fourth argument.
# Third argument is whether file MUST exist. If 0, no action taken.
add_cus_dep('aux', 'glstex', 0, 'run_bib2gls');

# PERL subroutine. $_[0] is the argument (filename in this case).
# File from author from here: https://tex.stackexchange.com/a/401979/120853
sub run_bib2gls {
    if ( $silent ) {
        my $ret = system "bib2gls --silent --group '$_[0]'";
    } else {
        my $ret = system "bib2gls --group '$_[0]'";
    };
    
    my ($base, $path) = fileparse( $_[0] );
    if ($path && -e "$base.glstex") {
        rename "$base.glstex", "$path$base.glstex";
    }

    # Analyze log file.
    local *LOG;
    $LOG = "$_[0].glg";
    if (!$ret && -e $LOG) {
        open LOG, "<$LOG";
	while (<LOG>) {
            if (/^Reading (.*\.bib)\s$/) {
		rdb_ensure_file( $rule, $1 );
	    }
	}
	close LOG;
    }
    return $ret;
}
